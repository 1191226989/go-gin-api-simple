///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package prize

import (
	"fmt"
	"time"

	"go-gin-api-simple/internal/repository/mysql"

	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *Prize {
	return new(Prize)
}

func NewQueryBuilder() *prizeQueryBuilder {
	return new(prizeQueryBuilder)
}

func (t *Prize) Create(db *gorm.DB) (id int32, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

type prizeQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *prizeQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *prizeQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	db = db.Model(&Prize{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *prizeQueryBuilder) Delete(db *gorm.DB) (err error) {
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&Prize{}).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (qb *prizeQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&Prize{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *prizeQueryBuilder) First(db *gorm.DB) (*Prize, error) {
	ret := &Prize{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *prizeQueryBuilder) QueryOne(db *gorm.DB) (*Prize, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *prizeQueryBuilder) QueryAll(db *gorm.DB) ([]*Prize, error) {
	var ret []*Prize
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *prizeQueryBuilder) Limit(limit int) *prizeQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *prizeQueryBuilder) Offset(offset int) *prizeQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *prizeQueryBuilder) WhereId(p mysql.Predicate, value int32) *prizeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *prizeQueryBuilder) WhereIdIn(value []int32) *prizeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *prizeQueryBuilder) WhereIdNotIn(value []int32) *prizeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *prizeQueryBuilder) OrderById(asc bool) *prizeQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *prizeQueryBuilder) WhereName(p mysql.Predicate, value string) *prizeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", p),
		value,
	})
	return qb
}

func (qb *prizeQueryBuilder) WhereNameIn(value []string) *prizeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", "IN"),
		value,
	})
	return qb
}

func (qb *prizeQueryBuilder) WhereNameNotIn(value []string) *prizeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", "NOT IN"),
		value,
	})
	return qb
}

func (qb *prizeQueryBuilder) OrderByName(asc bool) *prizeQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "name "+order)
	return qb
}

func (qb *prizeQueryBuilder) WhereImage(p mysql.Predicate, value string) *prizeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "image", p),
		value,
	})
	return qb
}

func (qb *prizeQueryBuilder) WhereImageIn(value []string) *prizeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "image", "IN"),
		value,
	})
	return qb
}

func (qb *prizeQueryBuilder) WhereImageNotIn(value []string) *prizeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "image", "NOT IN"),
		value,
	})
	return qb
}

func (qb *prizeQueryBuilder) OrderByImage(asc bool) *prizeQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "image "+order)
	return qb
}

func (qb *prizeQueryBuilder) WhereWorth(p mysql.Predicate, value float64) *prizeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "worth", p),
		value,
	})
	return qb
}

func (qb *prizeQueryBuilder) WhereWorthIn(value []float64) *prizeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "worth", "IN"),
		value,
	})
	return qb
}

func (qb *prizeQueryBuilder) WhereWorthNotIn(value []float64) *prizeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "worth", "NOT IN"),
		value,
	})
	return qb
}

func (qb *prizeQueryBuilder) OrderByWorth(asc bool) *prizeQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "worth "+order)
	return qb
}

func (qb *prizeQueryBuilder) WhereContent(p mysql.Predicate, value string) *prizeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "content", p),
		value,
	})
	return qb
}

func (qb *prizeQueryBuilder) WhereContentIn(value []string) *prizeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "content", "IN"),
		value,
	})
	return qb
}

func (qb *prizeQueryBuilder) WhereContentNotIn(value []string) *prizeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "content", "NOT IN"),
		value,
	})
	return qb
}

func (qb *prizeQueryBuilder) OrderByContent(asc bool) *prizeQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "content "+order)
	return qb
}

func (qb *prizeQueryBuilder) WhereIsUsed(p mysql.Predicate, value int32) *prizeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_used", p),
		value,
	})
	return qb
}

func (qb *prizeQueryBuilder) WhereIsUsedIn(value []int32) *prizeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_used", "IN"),
		value,
	})
	return qb
}

func (qb *prizeQueryBuilder) WhereIsUsedNotIn(value []int32) *prizeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_used", "NOT IN"),
		value,
	})
	return qb
}

func (qb *prizeQueryBuilder) OrderByIsUsed(asc bool) *prizeQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "is_used "+order)
	return qb
}

func (qb *prizeQueryBuilder) WhereCreateTime(p mysql.Predicate, value time.Time) *prizeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_time", p),
		value,
	})
	return qb
}

func (qb *prizeQueryBuilder) WhereCreateTimeIn(value []time.Time) *prizeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_time", "IN"),
		value,
	})
	return qb
}

func (qb *prizeQueryBuilder) WhereCreateTimeNotIn(value []time.Time) *prizeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_time", "NOT IN"),
		value,
	})
	return qb
}

func (qb *prizeQueryBuilder) OrderByCreateTime(asc bool) *prizeQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "create_time "+order)
	return qb
}

func (qb *prizeQueryBuilder) WhereModifyTime(p mysql.Predicate, value time.Time) *prizeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "modify_time", p),
		value,
	})
	return qb
}

func (qb *prizeQueryBuilder) WhereModifyTimeIn(value []time.Time) *prizeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "modify_time", "IN"),
		value,
	})
	return qb
}

func (qb *prizeQueryBuilder) WhereModifyTimeNotIn(value []time.Time) *prizeQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "modify_time", "NOT IN"),
		value,
	})
	return qb
}

func (qb *prizeQueryBuilder) OrderByModifyTime(asc bool) *prizeQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "modify_time "+order)
	return qb
}
